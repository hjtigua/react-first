{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","GetGif","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAiCeA,EA9BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACNC,mBAAS,IADH,mBACnCC,EADmC,KACvBC,EADuB,KAe1C,OACC,sBAAMC,SATc,SAACC,GACrBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAc,SAACS,GAAD,OAAiBP,GAAjB,mBAAgCO,OAC9CN,EAAc,MAKf,SACC,uBACCO,KAAK,OACLC,MAAOT,EACPU,SAjByB,SAACP,GAC5BF,EAAcE,EAAEQ,OAAOF,a,+BCPZG,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACrDH,GAFoB,+DAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GACtB,MAAO,CACNC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAVd,kBAadM,GAbc,4CAAH,sDCWJO,EATK,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACjC,OACC,sBAAKc,UAAU,yCAAf,UACC,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCsBQO,EAvBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFN,SAACA,GAAc,IAAD,EACfd,mBAAS,CAClCqB,KAAM,GACNa,SAAS,IAH+B,mBAClCC,EADkC,KAC3BC,EAD2B,KAezC,OARAC,qBAAU,WACTxB,EAAOC,GAAUwB,MAAK,SAACC,GACtBH,EAAS,CACRf,KAAMkB,EACNL,SAAS,SAGT,CAACpB,IACGqB,EDZ2BK,CAAa1B,GAAjCa,EADmB,EACzBN,KAAca,EADW,EACXA,QACtB,OACC,eAAC,WAAD,WACC,oBAAIJ,UAAU,oCAAd,SACEhB,IAGDoB,GACA,mBAAGJ,UAAU,wCAAb,qBAKD,qBAAKA,UAAU,YAAf,SACEH,EAAOJ,KAAI,SAACC,GAAD,OACX,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aECZgB,EAjBM,WAAO,IAAD,EACUzC,mBAAS,CAAC,cADpB,mBACnBQ,EADmB,KACPT,EADO,KAG1B,OACC,eAAC,WAAD,WACC,gDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACES,EAAWe,KAAI,SAACT,GAAD,OACf,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCVnB4B,IAASC,OACJ,cAAC,EAAD,IACHC,SAASC,eAAe,W","file":"static/js/main.172a7b9b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n\tconst [inputValue, setInputValue] = useState(\"\");\r\n\r\n\tconst handleInputOnChange = (e) => {\r\n\t\tsetInputValue(e.target.value);\r\n\t};\r\n\r\n\tconst handleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\t\tif (inputValue.trim().length > 2) {\r\n\t\t\tsetCategories((categories) => [inputValue, ...categories]);\r\n\t\t\tsetInputValue(\"\");\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t<input\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tvalue={inputValue}\r\n\t\t\t\tonChange={handleInputOnChange}\r\n\t\t\t/>\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nAddCategory.propTypes = {\r\n\tsetCategories: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddCategory;\r\n","export const GetGif = async (category) => {\r\n\tconst url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n\t\tcategory\r\n\t)}&limit=10&api_key=8wyRasEK1wxtmotA4LQEQgEgbRuSEWyv`;\r\n\tconst resp = await fetch(url);\r\n\tconst { data } = await resp.json();\r\n\tconst gifs = data.map((img) => {\r\n\t\treturn {\r\n\t\t\tid: img.id,\r\n\t\t\ttitle: img.title,\r\n\t\t\turl: img.images.downsized_medium.url,\r\n\t\t};\r\n\t});\r\n\treturn gifs;\r\n};\r\n","import React from \"react\";\r\n\r\nconst GifGridItem = ({ id, title, url }) => {\r\n\treturn (\r\n\t\t<div className=\"card animate__animated animate__fadeIn\">\r\n\t\t\t<img src={url} alt={title} />\r\n\t\t\t<p>{title}</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default GifGridItem;\r\n","import React from \"react\";\r\nimport { Fragment } from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport GifGridItem from \"./GifGridItem\";\r\n\r\nconst GifGrid = ({ category }) => {\r\n\tconst { data: images, loading } = useFetchGifs(category);\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<h3 className=\"animate__animated animate__fadeIn\">\r\n\t\t\t\t{category}\r\n\t\t\t</h3>\r\n\r\n\t\t\t{loading && (\r\n\t\t\t\t<p className=\"card animate__animated animate__flash\">\r\n\t\t\t\t\tLoading\r\n\t\t\t\t</p>\r\n\t\t\t)}\r\n\r\n\t\t\t<div className=\"card-grid\">\r\n\t\t\t\t{images.map((img) => (\r\n\t\t\t\t\t<GifGridItem key={img.id} {...img}></GifGridItem>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default GifGrid;\r\n","import { useEffect, useState } from \"react\";\r\nimport { GetGif } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n\tconst [state, setState] = useState({\r\n\t\tdata: [],\r\n\t\tloading: true,\r\n\t});\r\n\t// cuando esa categiria cambie yo le estoy pidiendo a reac que vuelva a ejecutar eso\r\n\t// es decir todo lo que este en el array efectara a la peticion.\r\n\tuseEffect(() => {\r\n\t\tGetGif(category).then((imgs) => {\r\n\t\t\tsetState({\r\n\t\t\t\tdata: imgs,\r\n\t\t\t\tloading: false,\r\n\t\t\t});\r\n\t\t});\r\n\t}, [category]);\r\n\treturn state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Fragment } from \"react\";\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n\tconst [categories, setCategories] = useState([\"One piece\"]);\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<h2>Gif expert App</h2>\r\n\t\t\t<AddCategory setCategories={setCategories} />\r\n\t\t\t<hr />\r\n\t\t\t<ol>\r\n\t\t\t\t{categories.map((category) => (\r\n\t\t\t\t\t<GifGrid key={category} category={category}></GifGrid>\r\n\t\t\t\t))}\r\n\t\t\t</ol>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n     <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}